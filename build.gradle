buildscript {
	repositories {
		gradlePluginPortal()
	}
	dependencies {
		classpath 'com.modrinth.minotaur:Minotaur:2.6.0'
		classpath "com.github.breadmoirai:github-release:2.4.1"
	}
}

plugins {
	id 'maven-publish'
	alias libs.plugins.loom
}

if (System.getenv("MODRINTH_TOKEN")) {
	apply plugin: "com.modrinth.minotaur"
}
if (System.getenv("GITHUB_TOKEN")) {
	apply plugin: "com.github.breadmoirai.github-release"
}

archivesBaseName = project.archives_base_name

def mc_major = '1.20'
def mc = mc_major + ''
def default_branch = '1.19'

def origVersion = project.version

dependencies {
	// Subprojects //
	runtimeOnly(include(project(path: ':core', configuration: 'namedElements')))
	runtimeOnly(include(project(path: ':client', configuration: 'namedElements')))
	runtimeOnly(include(project(path: ':ui', configuration: 'namedElements')))
	runtimeOnly(include(project(path: ':cardinal', configuration: 'namedElements')))
	runtimeOnly(include(project(path: ':cardinal-ui', configuration: 'namedElements')))
	runtimeOnly(include(project(path: ':compat', configuration: 'namedElements')))
	runtimeOnly(include(project(path: ':compat-ui', configuration: 'namedElements')))

	// Run Compat Mods Locally //
	modLocalRuntime libs.placeholder
	modLocalRuntime libs.playerData
	modLocalRuntime libs.styledNicknames
	modLocalRuntime libs.pehkui
}

allprojects {
	apply plugin: 'org.quiltmc.loom'
	apply plugin: 'maven-publish'


	project.version = project.version + "+" + mc
	group = project.maven_group

	loom {
		runs {
			client {
				client()
				ideConfigGenerated(true)
			}
			server {
				server()
				ideConfigGenerated(true)
			}
		}
	}

	java {
		sourceCompatibility = JavaVersion.VERSION_17
		targetCompatibility = JavaVersion.VERSION_17
		withSourcesJar()
		withJavadocJar()
	}

	repositories {
		// Modrinth
		maven {
			url "https://api.modrinth.com/maven"
			content {
				includeGroup "maven.modrinth"
			}
		}
		maven { // Server Translations API
			url "https://maven.nucleoid.xyz/"
		}
		maven { // owo-lib
			url 'https://maven.wispforest.io'
		}

		// Fabric Tailor
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }

		// Origins
		maven {
			url 'https://maven.ladysnake.org/releases'
		}
		maven {
			url 'https://maven.cafeteria.dev'
			content {
				includeGroup 'net.adriantodt.fabricmc'
			}
		}
		maven {
			url "https://maven.jamieswhiteshirt.com/libs-release"
			content {
				includeGroup "com.jamieswhiteshirt"
			}
		}

		maven { // Cloth Config
			url "https://maven.shedaniel.me/"
		}
		maven { // ModMenu
			url "https://maven.terraformersmc.com/"
		}

		// Jitpack
		maven {
			url 'https://jitpack.io'
			content {
				// Avoids sending everything through JitPack, which can be slow.
				// Add any further using `includeGroup 'com.example'`
				includeGroupByRegex 'com\\.github\\..*'
			}
		}
	}

	dependencies {
		// // Base // //
		minecraft libs.mc
		mappings variantOf(libs.qm) { classifier "intermediary-v2" }
		modImplementation libs.ql
		modLocalRuntime libs.bundles.local.conveniences
	}

	processResources {
		final Map<String, String> map = [
				"switchy"              : version.toString(),
				"mc"                   : libs.versions.mc.get(),
				"ql"                   : libs.versions.ql.get(),
				"qsl"                  : libs.versions.qsl.get(),
				"serverTranslationsAPI": libs.versions.serverTranslationsApi.get(),
				"qfapi"                : libs.versions.qfapi.get(),
				"owo"                  : libs.versions.owo.get(),
				"styledNicknames"      : libs.versions.styledNicknames.get(),
				"fabrictailor"         : libs.versions.fabrictailor.get(),
				"origins"              : libs.versions.origins.get().replaceFirst('v', ''),
				"pehkui"               : libs.versions.pehkui.get(),
				"fabrication"          : libs.versions.fabrication.get(),
				"figura"          	   : libs.versions.figura.get(),
		]

		inputs.properties(map)
		filesMatching('quilt.mod.json') { expand(map) }
	}

	tasks.withType(JavaCompile).configureEach {
		it.options.encoding = "UTF-8"
		it.options.release = 17
	}

	jar {
		from("LICENSE.txt") {
			rename { "${it}_${archivesBaseName}" }
		}
	}
}

subprojects {
	archivesBaseName = project.archives_base_name + '-' + project.name

	processResources {
		from("$rootDir/src/main/resources/assets/switchy/icon.png") {
			rename { "assets/switchy/icon.png" }
		}
	}

	// Configure the maven publication
	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java

				artifactId = project.archives_base_name + '-' + project.name
			}
		}

		repositories {
			if (System.getenv("SWITCHY_MAVEN_URL")) {
				maven {
					url = System.getenv("SWITCHY_MAVEN_URL")
					credentials {
						username = System.getenv("SWITCHY_MAVEN_USERNAME")
						password = System.getenv("SWITCHY_MAVEN_PASSWORD")
					}
				}
			}
		}
	}
}

if (System.getenv("MODRINTH_TOKEN")) {
	modrinth {
		token = System.getenv("MODRINTH_TOKEN")
		projectId = 'switchy'
		versionNumber = project.version
		versionName = origVersion
		versionType = 'release'
		uploadFile = remapJar
		gameVersions = [mc, '1.20.1']
		loaders = ['quilt']
		detectLoaders = false
		dependencies {
			required.project "qsl"
			required.project "owo-lib"
			optional.project "fabrictailor"
			optional.project "pehkui"
			optional.project "origins"
			optional.project "fabrication"
			optional.project "styled-nicknames"
			optional.project "arcpocalypse"
			optional.project "lanyard"
			optional.project "figura"
		}
		changelog = "Changelog: https://github.com/sisby-folk/switchy/releases/tag/v" + origVersion
		syncBodyFrom = rootProject.file("README.md").text
	}
}

if (System.getenv("GITHUB_TOKEN")) {
	githubRelease {
		token System.getenv("GITHUB_TOKEN")
		owner "sisby-folk"
		repo "switchy"
		tagName 'v' + origVersion
		releaseName origVersion
		targetCommitish default_branch
		draft false
		prerelease false
		releaseAssets remapJar.archiveFile
		allowUploadToExisting true
		generateReleaseNotes true
	}
	tasks.githubRelease.dependsOn remapJar
}

if (System.getenv("SWITCHY_MAVEN_URL") && System.getenv("MODRINTH_TOKEN") && System.getenv("GITHUB_TOKEN")) {
	tasks.register("fullRelease") {
		group "publishing"
		dependsOn "githubRelease"
		dependsOn "modrinth"
		dependsOn "publish"
	}
}
